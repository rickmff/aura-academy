import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { QueryProvider } from "@/components/providers/query-provider";
import Link from 'next/link';
import UserMenu from "@/components/UserMenu";
import { cookies } from 'next/headers';
import FlashToastClient from '@/components/FlashToastClient';
import AuthListener from '@/components/AuthListener';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const cookieTheme = cookieStore.get('theme')?.value as undefined | 'light' | 'dark' | 'system';
  const cookieLocale = cookieStore.get('locale')?.value || 'en';

  const noFlashScript = `
  (function(){
    try {
      var t = localStorage.getItem('theme');
      var c = document.cookie.match(/(?:^|; )theme=([^;]+)/);
      var theme = (t || (c && decodeURIComponent(c[1])) || '${cookieTheme || 'system'}');
      var m = window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (theme === 'dark' || (theme === 'system' && m)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    } catch(e) {}
  })();
  `;

  return (
    <html lang={cookieLocale} suppressHydrationWarning>
      <head>
        <script dangerouslySetInnerHTML={{ __html: noFlashScript }} />
      </head>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <QueryProvider>
          <AuthListener />
          <header className="border-b">
            <div className="mx-auto max-w-5xl px-4 h-14 flex items-center justify-between">
              <Link href="/" className="font-semibold">Aura Academy</Link>
              <UserMenu />
            </div>
          </header>
          <div className="mx-auto max-w-5xl p-6 space-y-4">
            {children}
          </div>
          {(() => {
            const flash = cookieStore.get('flash')?.value;
            if (!flash) return null;
            try {
              const data = JSON.parse(flash);
              return <FlashToastClient title={data.title} description={data.description} />;
            } catch {
              return null;
            }
          })()}
        </QueryProvider>
      </body>
    </html>
  );
}
